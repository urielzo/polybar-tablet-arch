#!/usr/bin/env bash

n="\e[0m"
b="\e[1m"

[[ -f /tmp/player ]] || touch /tmp/player

help="Amixer and playerctl wrapper script

All options send a notification, with the exceptions of status

${b}Options: ${n}
 ${b}Audio: ${n}
   ${b}status${n}         List playing media and volume
    - ${b}vol${n}           List volume
    - ${b}song${n}          List playing media
   ${b}set${n}            Set volume to number
   ${b}up${n}             Increase volume by number (5 if unspecified)
   ${b}down${n}           Decrease volume by number (5 if unspecified)
   ${b}m${n}              Toggle mute
   ${b}mute${n}           Mute
   ${b}unmute${n}         Unmute
 ${b}Media: ${n}
  ${b}next${n}           Skip ahead in playlist
  ${b}prev(ious)${n}     Jump back in playlist
  ${b}stop${n}           Stop media
  ${b}play${n}           Play media
  ${b}pause${n}          Pause media
  ${b}p${n}              Toggle play/pause"

function print() {
	 echo $@
}

function notify() {
	gdbus call -e -d "org.freedesktop.Notifications" \
		-o /org/freedesktop/Notifications \
		-m org.freedesktop.Notifications.Notify "" \
		$1 "" "$2" "$3" "[]" "{}" 5000 >/dev/null
}

function media() {
	if [[ -n $player ]] && playerctl -p $player status &>/dev/null; then
		playerctl -p $player $@
	else
		playerctl $@
	fi
}


opts=`getopt -o hpn --long help,print,notify -- "$@"`
eval set -- "$opts"

while true ; do
	case "$1" in
		-p|--print) function print() {
			printf "" &>/dev/null
		}; shift;;
		-n|--notify) function notify() {
			printf "" &>/dev/null
		}; shift;;
		-h|--help) echo -e "$help"; exit ;;
		--) shift; break;;
	esac
done

. /tmp/player

muted="$(amixer -D pulse get Master | grep -i "\[off\]\|\[on\]" | awk '{print $6}' | sed -e '1!d' -e 's/\[//' -e 's/\]//')"
if [[ $muted = on ]]; then
	mute="mute"
elif [[ $muted = off ]]; then
	mute="unmute"
fi

[[ -n $2 ]] && p="$2" || p="5"

case $1 in
	up)     amixer -D pulse sset Master $p%+ >/dev/null;   vol="nonzero";;
	down)   amixer -D pulse sset Master $p%- >/dev/null;   vol="nonzero";;
	set)    amixer -D pulse sset Master $2%  >/dev/null;   vol="nonzero";;
	m)      amixer -D pulse sset Master $mute >/dev/null;  vol="nonzero";;
	mute)   amixer -D pulse sset Master mute >/dev/null;   vol="nonzero";;
	unmute) amixer -D pulse sset Master unmute >/dev/null; vol="nonzero";;
	pause)  media pause 2>/dev/null;      ctl="nonzero" ;;
	play)   media play 2>/dev/null;       ctl="nonzero";;
	p)      media play-pause 2>/dev/null; ctl="nonzero";;
	next)   media next 2>/dev/null;       ctl="nonzero";;
	prev)   media previous 2>/dev/null;   ctl="nonzero";;
	stop)   media stop 2>/dev/null;       ctl="nonzero";;
	previous) media previous 2>/dev/null; ctl="nonzero";;
	status) vol="nonzero"; ctl="nonzero";;
	*) echo -e "$help"; exit;;
esac

bar -v &

if [[ -n $vol ]]; then
	pc_amix="$(amixer -D pulse get Master | grep -i "\[off\]\|\[on\]" | sed -e '1!d' -e 's/\[//g' -e 's/\]//g')"
	pc_vol="$(echo ${pc_amix}  | awk '{print $5}')"
	pc_mute="$(echo ${pc_amix} | awk '{print $6}')"

	if [ $pc_mute = off ]; then
		output="Muted"
	elif [ $pc_mute = on ]; then
		output="${pc_vol}"
	fi
fi

if [[ -n $ctl ]]; then
	media="$(media metadata xesam:title 2>/dev/null)" 2>/dev/null
	artist="$(media metadata xesam:artist 2>/dev/null)" 2>/dev/null
	file="$(media metadata xesam:url 2>/dev/null | sed 's|^.*/||')" 
	file="$(echo $file | sed -e 's/%20/ /g' -e 's/%28/(/' -e 's/%29/)/' -e 's/%5D/\]/' -e 's/%5B/\[/' )"

	playing="$(playerctl status 2>/dev/null)" 2>/dev/null

	if [[ -n $artist ]]; then
		SpA="$artist - $media"
	elif [[ -n $media ]]; then
		SpA="$media"
	else
		SpA="$file"
	fi

	if [[ $playing == "Paused" ]]; then
		song="$SpA"
		play="paused"
		output_pp="Media $play"
	elif [[ $playing == "Playing" ]]; then
		song="$SpA"
		play="resumed"
		output_pp="Media $play"
		output_next="Skipped to the next in playlist"
		output_prev="Jumped back in playlist"
	elif [[ -z $playing  ]]; then
		song="No playing media"
		output_prev="No playing media"
		output_next="No playing media"
		output_pp="No playing media"
	fi
fi

if [[ $(printf "%s" "$output" | sed 's/♪ //') = Muted ]]; then
	up="Volume is muted"
	down="Volume is muted"
else
	up="Volume increased to $(printf "%s" "$output" | sed 's/♪ //')"
	down="Volume decreased to $(printf "%s" "$output" | sed 's/♪ //')"
fi


case $1 in
	up)     print "$output"; notify 69 "$up";;
	down)   print "$output"; notify 69 "$down";;
	set)    print "$output"; notify 69 "Volume set to $(printf "%s" "$output" | sed 's/♪ //')";;
	m)      print "$output"; notify 69 "$(printf "Volume %s" "$([[ $pc_mute = on ]] && echo "unmuted" || echo "muted")" | sed 's/♪ //'; [[ $mute == unmute ]] && printf "\n%s" "$output" | sed 's/♪ //')";;
	mute)   print "$output"; notify 69 "$(printf "Volume muted\n")";;
	unmute) print "$output"; notify 69 "$(printf "Volume unmuted\n%s" "$song")";;
	pause)  print "$song"; notify 420 "$output_pp" "$SpA";;
	play)   print "$song"; notify 420 "$output_pp" "$SpA";;
	p)      print "$song"; notify 420 "$output_pp" "$SpA";;
	next)   print "$song"; notify 420 "$output_next" "$SpA";;
	prev)   print "$song"; notify 420 "$output_prev" "$SpA";;
	stop)   print "Media stopped"; notify 420 "Media stopped";;
	previous) print "$song"; notify 420  "$output_prev" "$SpA";;
	status) case $2 in
		song) print "$song"; notify 69 "$song";;
		vol)  print "$output"; notify 69 "$output";;
		*) print "$song / $output"; notify 75 "$output" "$song";;
	esac;;
esac

pgrep bar &>/dev/null && bar -v
